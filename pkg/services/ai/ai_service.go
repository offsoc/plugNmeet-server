package aiservice

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/mynaparrot/plugnmeet-server/pkg/config"
	"github.com/mynaparrot/plugnmeet-server/pkg/dbmodels"
	dbservice "github.com/mynaparrot/plugnmeet-server/pkg/services/db"
	"github.com/sirupsen/logrus"
)

// AIService AI服务
type AIService struct {
	app *config.AppConfig
	ds  *dbservice.DatabaseService
}

// AISummaryRequest AI摘要请求
type AISummaryRequest struct {
	RoomId      string            `json:"room_id"`
	Transcripts []TranscriptEntry `json:"transcripts"`
}

// TranscriptEntry 转录条目
type TranscriptEntry struct {
	UserId    string `json:"user_id"`
	UserName  string `json:"user_name"`
	Text      string `json:"text"`
	Timestamp int64  `json:"timestamp"`
	Language  string `json:"language"`
}

// AISummaryResult AI摘要结果
type AISummaryResult struct {
	RoomId      string       `json:"room_id"`
	Summary     string       `json:"summary"`
	KeyPoints   []string     `json:"key_points"`
	ActionItems []ActionItem `json:"action_items"`
	CreatedAt   int64        `json:"created_at"`
}

// ActionItem 行动项
type ActionItem struct {
	Description string `json:"description"`
	Assignee    string `json:"assignee"`
	DueDate     int64  `json:"due_date"`
}

// AISubtitleRequest AI字幕请求
type AISubtitleRequest struct {
	RoomId   string `json:"room_id"`
	UserId   string `json:"user_id"`
	Text     string `json:"text"`
	Language string `json:"language"`
}

// AITranslationRequest AI翻译请求
type AITranslationRequest struct {
	RoomId     string `json:"room_id"`
	Text       string `json:"text"`
	SourceLang string `json:"source_lang"`
	TargetLang string `json:"target_lang"`
}

// AIChatRequest AI聊天请求
type AIChatRequest struct {
	RoomId  string        `json:"room_id"`
	UserId  string        `json:"user_id"`
	Message string        `json:"message"`
	Context []ChatMessage `json:"context"`
}

// ChatMessage 聊天消息
type ChatMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// AIChatResponse AI聊天响应
type AIChatResponse struct {
	RoomId    string `json:"room_id"`
	Reply     string `json:"reply"`
	CreatedAt int64  `json:"created_at"`
}

// NewAIService 创建新的AI服务
func NewAIService(app *config.AppConfig, ds *dbservice.DatabaseService) *AIService {
	if app == nil {
		app = config.GetConfig()
	}
	if ds == nil {
		ds = dbservice.New(app.DB)
	}

	return &AIService{
		app: app,
		ds:  ds,
	}
}

// GenerateMeetingSummary 生成会议摘要
func (s *AIService) GenerateMeetingSummary(ctx context.Context, req *AISummaryRequest) (*AISummaryResult, error) {
	// 这里应该调用实际的AI服务来生成摘要
	// 为简化起见，我们使用模拟实现

	// 构造输入文本
	var fullTranscript strings.Builder
	for _, entry := range req.Transcripts {
		fullTranscript.WriteString(fmt.Sprintf("[%s] %s: %s\n",
			time.Unix(entry.Timestamp, 0).Format("15:04:05"),
			entry.UserName,
			entry.Text))
	}

	// 模拟AI处理
	summary := "This is a simulated meeting summary. In a real implementation, this would be generated by an AI model."
	keyPoints := []string{
		"Key point 1 from the meeting",
		"Key point 2 from the meeting",
		"Key point 3 from the meeting",
	}
	actionItems := []ActionItem{
		{
			Description: "Follow up on action item 1",
			Assignee:    "John Doe",
			DueDate:     time.Now().Add(24 * time.Hour).Unix(),
		},
		{
			Description: "Complete task 2",
			Assignee:    "Jane Smith",
			DueDate:     time.Now().Add(48 * time.Hour).Unix(),
		},
	}

	result := &AISummaryResult{
		RoomId:      req.RoomId,
		Summary:     summary,
		KeyPoints:   keyPoints,
		ActionItems: actionItems,
		CreatedAt:   time.Now().Unix(),
	}

	// 保存摘要到数据库
	err := s.saveMeetingSummary(result)
	if err != nil {
		logrus.Errorln("Error saving meeting summary:", err)
	}

	return result, nil
}

// GenerateSmartSubtitles 生成智能字幕
func (s *AIService) GenerateSmartSubtitles(ctx context.Context, req *AISubtitleRequest) (string, error) {
	// 这里应该调用实际的AI服务来生成智能字幕
	// 为简化起见，我们使用模拟实现

	// 模拟AI处理，可能包括语法纠正、标点符号添加等
	smartSubtitle := fmt.Sprintf("Enhanced: %s", req.Text)

	return smartSubtitle, nil
}

// TranslateText 翻译文本
func (s *AIService) TranslateText(ctx context.Context, req *AITranslationRequest) (string, error) {
	// 这里应该调用实际的AI翻译服务
	// 为简化起见，我们使用模拟实现

	// 模拟翻译
	translatedText := fmt.Sprintf("[Translated from %s to %s] %s",
		req.SourceLang, req.TargetLang, req.Text)

	return translatedText, nil
}

// ProcessChatMessage 处理聊天消息
func (s *AIService) ProcessChatMessage(ctx context.Context, req *AIChatRequest) (*AIChatResponse, error) {
	// 这里应该调用实际的AI聊天服务
	// 为简化起见，我们使用模拟实现

	// 构造上下文
	var contextStr strings.Builder
	for _, msg := range req.Context {
		contextStr.WriteString(fmt.Sprintf("%s: %s\n", msg.Role, msg.Content))
	}

	// 模拟AI处理
	reply := fmt.Sprintf("This is a simulated AI response to: %s", req.Message)

	response := &AIChatResponse{
		RoomId:    req.RoomId,
		Reply:     reply,
		CreatedAt: time.Now().Unix(),
	}

	return response, nil
}

// saveMeetingSummary 保存会议摘要到数据库
func (s *AIService) saveMeetingSummary(summary *AISummaryResult) error {
	// 将关键点和行动项转换为JSON
	keyPointsJSON, err := json.Marshal(summary.KeyPoints)
	if err != nil {
		return err
	}

	actionItemsJSON, err := json.Marshal(summary.ActionItems)
	if err != nil {
		return err
	}

	// 创建数据库记录
	meetingSummary := &dbmodels.MeetingSummary{
		RoomId:      summary.RoomId,
		SummaryText: summary.Summary,
		KeyPoints:   string(keyPointsJSON),
		ActionItems: string(actionItemsJSON),
		CreatedAt:   summary.CreatedAt,
	}

	// 保存到数据库
	return s.ds.SaveMeetingSummary(meetingSummary)
}

// GetMeetingSummary 获取会议摘要
func (s *AIService) GetMeetingSummary(roomId string) (*AISummaryResult, error) {
	// 从数据库获取摘要
	summary, err := s.ds.GetMeetingSummary(roomId)
	if err != nil {
		return nil, err
	}

	// 解析关键点和行动项
	var keyPoints []string
	err = json.Unmarshal([]byte(summary.KeyPoints), &keyPoints)
	if err != nil {
		return nil, err
	}

	var actionItems []ActionItem
	err = json.Unmarshal([]byte(summary.ActionItems), &actionItems)
	if err != nil {
		return nil, err
	}

	result := &AISummaryResult{
		RoomId:      summary.RoomId,
		Summary:     summary.SummaryText,
		KeyPoints:   keyPoints,
		ActionItems: actionItems,
		CreatedAt:   summary.CreatedAt,
	}

	return result, nil
}

// SaveTranscript 保存转录
func (s *AIService) SaveTranscript(roomId, userId, userName, text, language string) error {
	transcript := &dbmodels.MeetingTranscript{
		RoomId:    roomId,
		UserId:    userId,
		UserName:  userName,
		Text:      text,
		Language:  language,
		Timestamp: time.Now().Unix(),
	}

	return s.ds.SaveMeetingTranscript(transcript)
}

// GetTranscripts 获取转录
func (s *AIService) GetTranscripts(roomId string) ([]TranscriptEntry, error) {
	transcripts, err := s.ds.GetMeetingTranscripts(roomId)
	if err != nil {
		return nil, err
	}

	var entries []TranscriptEntry
	for _, transcript := range transcripts {
		entry := TranscriptEntry{
			UserId:    transcript.UserId,
			UserName:  transcript.UserName,
			Text:      transcript.Text,
			Timestamp: transcript.Timestamp,
			Language:  transcript.Language,
		}
		entries = append(entries, entry)
	}

	return entries, nil
}
